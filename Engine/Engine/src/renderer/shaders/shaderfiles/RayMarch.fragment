#version 330 core

in vec3 VertexPos;
out vec4 FragColor;

uniform vec3 CameraPos;
uniform vec3 BoxSize;

uniform sampler3D smoke;

vec4 ray_march(in vec3 rayorigin, vec3 raydir, vec3 FragPos)
{

	vec3 current_pos;
	float depth = 0.0;

	const int NUMBER_STEPS = 70;
	const float MARCH_SIZE = 0.05;

    float res = 0.2;

	for(int i = 0; i < NUMBER_STEPS; ++i) 
	{
		current_pos = FragPos + depth * raydir;

		float sample = texture(smoke, current_pos).r;

		if(sample > 0.001) {
            res += sample;
		}

		depth += MARCH_SIZE;
	}
	return vec4(0.8, 0.8, 0.8, res);
}

void main() 
{
	vec3 raydir = normalize(VertexPos - CameraPos);

    vec3 MappedFragPos = (VertexPos + BoxSize) / (BoxSize * 2.0);

	FragColor = ray_march(CameraPos, raydir, MappedFragPos);
}